import streamlit as st

import pandas as pd
import numpy as np

import plotly.graph_objs as go
import plotly.express as px
from plotly.subplots import make_subplots
from plotly.offline import init_notebook_mode, iplot, plot
import plotly as py

from pywaffle import Waffle

import matplotlib.pyplot as plt

st.set_page_config(
    page_title="–ö–æ—Å–º–æ—Å", page_icon='üöÄ',
)

st.markdown(
    '''
    # –ü—Ä–∏—á–∏–Ω—ã –Ω–µ—É–¥–∞—á –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π
    
    ### <center>–†–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ —Ç–æ–º, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–∏</center>
    
    __–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:__:
    
    - [–û–±–∑–æ—Ä –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö](#part1)
    - [–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –∫–æ—Å–º–æ–¥—Ä–æ–º–∞ –∏ –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏](#part2)
    - [–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –∑–∞–ø—É—Å–∫](#part3)
    - [–ò–º–µ—é—Ç –ª–∏ –∫–∞–∫–æ–µ-–ª–∏–±–æ –≤–ª–∏—è–Ω–∏–µ —Ä–∞–∫–µ—Ç—ã-–Ω–æ—Å–∏—Ç–µ–ª–∏?](#part4)
    - [–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ - –Ω–æ–≤–æ–µ –ª—É—á—à–µ —Å—Ç–∞—Ä–æ–≥–æ?](#part5)
    - [–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–∏ - Stonks :arrow_up: –∏–ª–∏ :arrow_down:](#part6)
    
    _–Ø–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è streamlit, –Ω–æ —Å–∫–æ—Ä–æ –æ–±–µ—â–∞–ª–∏ —ç—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å._
    
    ## –û–±–∑–æ—Ä –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    <a id = "part1"></a>
    
    –ë—É–¥–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ __All Space Missions from 1957__ ([—Å—Å—ã–ª–∫–∞]   
    (https://www.kaggle.com/agirlcoding/all-space-missions-from-1957)).
    
    <img src='https://storage.googleapis.com/
    kaggle-datasets-images/828921/1416362/d1834c9d4366150df0ffd5aa2868cd03
    /dataset-cover.jpg?t=2020-08-13-09-37-39' style='max-width: 100%'>
    
    –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ 7 –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:
    - __Company Name__ - –µ–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–π –∑–∞–ø—É—Å–∫
    - __Location__ - –º–µ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞
    - __Datum__ - –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
    - __Detail__ - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è —Ä–∞–∫–µ—Ç—ã
    - __Status Rocket__ - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∫–µ—Ç—ã
    - __Rocket__ - —Ü–µ–Ω–∞ –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö –¥–æ–ª–ª–∞—Ä–æ–≤
    - __Status Mission__ - —Å—Ç–∞—Ç—É—Å: –ø—Ä–æ–≤–∞–ª –∏–ª–∏ —É—Å–ø–µ—Ö –º–∏—Å—Å–∏–∏
    ''', unsafe_allow_html=True)

with st.echo(code_location='below'):
    df = pd.read_csv('Space_Corrected.csv')
    df.drop(['Unnamed: 0.1', 'Unnamed: 0'], axis=1, inplace=True)
    st.write(df)
st.markdown(
    """
    –ó–∞–≤–µ–¥–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–ª–∞—Å—å –∑–∞–ø—É—Å–∫–æ–º.
    """)

with st.echo(code_location='below'):
    def extract_country(location):
        country = location.split(',')[-1]
        country = country.strip()
        return country


    dict_countries = {
        'Russia': 'Russian Federation',
        "Barents Sea": 'Russian Federation',
        'New Mexico': 'USA',
        "Pacific Missile Range Facility": 'USA',
        "Gran Canaria": 'USA',
        "Yellow Sea": 'China',
        "Shahrud Missile Test Site": "Iran"
    }

    df['Country'] = df['Location'].apply(lambda location: extract_country(location))
    df['Country'] = df['Country'].replace(dict_countries)
st.markdown(
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã –∑–∞–ø—É—Å–∫–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã–¥–µ–ª–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    –≠—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.
    """)

with st.echo(code_location='below'):
    df['Datum'] = pd.to_datetime(df['Datum'])
    df['Year'] = df['Datum'].apply(lambda datetime: datetime.year)
    df['Month'] = df['Datum'].apply(lambda datetime: datetime.month)
    df['Weekday'] = df['Datum'].apply(lambda datetime: datetime.weekday())
st.markdown(
    """
    –¢–∞–∫–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –¥–≤–∏–≥–∞–µ—Ç–µ–ª—è–º–∏.
    """)

with st.echo(code_location='below'):
    def getVehicles(detail):
        list_vehicles = []
        list_detail = [x.strip() for x in detail.split('|')]
        for ele in list_detail:
            if 'Atlas' in ele:
                list_vehicles.append('Atlas')
            elif 'Ariane' in ele:
                list_vehicles.append('Ariane')
            elif 'Cosmos' in ele:
                list_vehicles.append('Cosmos')
            elif 'Delta' in ele:
                list_vehicles.append('Delta')
            elif 'Falcon' in ele:
                list_vehicles.append('Falcon')
            elif 'GSLV' in ele:
                list_vehicles.append('GSLV')
            elif 'Long March' in ele:
                list_vehicles.append('Long March')
            elif 'Molniya' in ele:
                list_vehicles.append('Molniya')
            elif 'PSLV' in ele:
                list_vehicles.append('PSLV')
            elif 'Soyuz' in ele:
                list_vehicles.append('Soyuz')
            elif 'Thor' in ele:
                list_vehicles.append('Thor')
            elif 'Titan' in ele:
                list_vehicles.append('Titan')
            elif 'Tsyklon' in ele:
                list_vehicles.append('Tsyklon')
            elif 'Vostok' in ele:
                list_vehicles.append('Vostok')
            elif 'Zenit' in ele:
                list_vehicles.append('Zenit')
            else:
                list_vehicles.append('Other')
        return list_vehicles


    df['Launch Vehicles'] = df['Detail'].apply(lambda x: getVehicles(x))
st.markdown(
    """
    –í—ã–≤–µ–¥–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏ —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
    """)
with st.echo(code_location='below'):
    st.write(df.head())
st.markdown(
    """
    –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É, 
    –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏ —Ç–µ—Ä–ø—è—Ç –Ω–µ—É–¥–∞—á—É, 
    –¥–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –º–∏—Å—Å–∏–π.
    
    _–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pywaffle. 
    –ù–æ –≥—Ä–∞—Ñ–∏–∫, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å –µ—ë –ø–æ–º–æ—â—å—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∏–≥—É—Ä–∞,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ._
    """)

with st.echo(code_location='below'):
    plt.rcParams['figure.figsize'] = (7, 11)
    plt.rcParams['axes.facecolor'] = '#F0F2F6'
    data = dict(df['Status Mission'].value_counts(normalize=True) * 100)
    fig = plt.figure(
        FigureClass=Waffle,
        columns=10,
        values=data,
        colors=("MediumSpringGreen", "Tomato", "#ff9d3b", "#ffff3b"),
        title={'label': '–°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏', 'loc': 'center'},
        icons='space-shuttle',
        icon_size=20,
        labels=[f"{k} {v:.2f}%" for k, v in data.items()],
        legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.2), 'ncol': len(data)},
    )

    plt.savefig('images/WafflePlot.jpg', orientation='landscape',
                format='jpg',
                progressive=True,
                bbox_inches='tight')
    st.image('images/WafflePlot.jpg', use_column_width=True)
st.markdown(
    """
    –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (89,71%) –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π —è–≤–ª—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏, 
    –∞ 7,84% –º–∏—Å—Å–∏–π - –Ω–µ—É–¥–∞—á–Ω—ã–º–∏. –≠—Ç–∏ 7,84% —Å–ª—É—á–∞–µ–≤ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    """)

st.markdown("""
## –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –∫–æ—Å–º–æ–¥—Ä–æ–º–∞ –∏ –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏
<a id='part-2' name='part-2'></a>
""", unsafe_allow_html=True)

st.image('images/Here.jpeg', caption='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∫–µ—Ç—ã', use_column_width=True)

st.markdown(
    """
    –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–æ–≤ —Ä–∞–∫–µ—Ç–æ–Ω–æ—Å–∏—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–æ—Å—å –∫–∞–∂–¥–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω. 
    –û—Ü–µ–Ω–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∏–∂–µ.
    
    _–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å –∑–∞—Ä–∞–Ω–µ–µ.
    –ò –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é csv —Ç–∞–±–ª–∏—Ü—É_
    """)

with st.echo(code_location='below'):
    total_launches = pd.read_csv('Total_Launch.csv')
    fig = px.bar(total_launches, x="Country", y="Cummulative_Launches", color="Country",
                 animation_group="Country", animation_frame="Year", range_y=[0, 2200])
    fig.update_layout(
        title={
            'text': "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ —Ä–∞–∫–æ—Ç–æ–Ω–æ—Å–∏—Ç–µ–ª–µ–π",
            'y': 0.95,
            'x': 0.5,
            'xanchor': 'center',
            'yanchor': 'top'},
        xaxis_title="",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤")
    st.write(fig)
st.markdown(
    """
    –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –°–®–ê. 
    –í–æ –º–Ω–æ–≥–æ–º —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –≥–æ–Ω–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–∞–Ω–∞–º–∏.
    –û –Ω–µ–π –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –Ω–∞ [–í–∏–∫–∏–ø–µ–¥–∏–∏](https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%81%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B3%D0%BE%D0%BD%D0%BA%D0%B0). 
    –ü—Ä–∏–≤–µ–¥—É –∫–æ—Ä–æ—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –æ—Ç—Ç—É–¥–∞:
    
    > –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–æ–Ω–∫–∞ (–∞–Ω–≥–ª. Space Race) ‚Äî –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ–µ —Å–æ–ø–µ—Ä–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ—Å–≤–æ–µ–Ω–∏—è –∫–æ—Å–º–æ—Å–∞ –º–µ–∂–¥—É 
    –°–°–°–† –∏ –°–®–ê –≤ –ø–µ—Ä–∏–æ–¥ —Å 1957 –ø–æ 1988 –≥–æ–¥—ã. –í —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π –≥–æ–Ω–∫–∏ –≤—Ö–æ–¥—è—Ç –∑–∞–ø—É—Å–∫–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö 
    —Å–ø—É—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª—ë—Ç—ã –≤ –∫–æ—Å–º–æ—Å –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —á–µ–ª–æ–≤–µ–∫–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã—Å–∞–¥–∫–∞ –Ω–∞ –õ—É–Ω—É. 
    –ü–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã.
    
    > –¢–µ—Ä–º–∏–Ω –ø–æ–ª—É—á–∏–ª —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –≥–æ–Ω–∫–æ–π –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π. –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–æ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∞–∂–Ω–æ–π 
    —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏ –∏–¥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –°–°–°–† –∏ –°–®–ê –≤ 
    –ø–µ—Ä–∏–æ–¥ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–π–Ω—ã. –≠—Ç–æ –±—ã–ª–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ —Ç–µ–º, —á—Ç–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–º–µ–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ
     –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∏ –≤–æ–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫, –Ω–æ –∏ –∑–∞–º–µ—Ç–Ω—ã–π –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç.
     
     
    –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã –∏ –Ω–µ—É–¥–∞—á–Ω—ã –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω, 
    –∏—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –º–µ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å—Ç—Ä–∞–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ—è–ª–∞ –∑–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–µ–π,
     —Ç–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –º–µ—Å—Ç–æ–º –∑–∞–ø—É—Å–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ø–ø–æ–Ω–∏—è, —Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —á–∞—Å—Ç—å—é, 
     —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –º–∏—Å—Å–∏–µ–π, –∑–∞–Ω–∏–º–∞–ª–∞—Å—å –Ø–ø–æ–Ω–∏—è.
    """)

with st.echo(code_location='below'):
    from sklearn.preprocessing import LabelEncoder

    encoder = LabelEncoder()
    encoder.fit(df['Status Mission'])
    colors = {0: 'Tomato', 1: 'DarkOrange', 2: 'Plum', 3: 'DeepSkyBlue'}

    fig = make_subplots(rows=8, cols=2, subplot_titles=df['Country'].unique())
    for i, country in enumerate(df['Country'].unique()):
        counts = df[df['Country'] == country]['Status Mission'].value_counts(normalize=True) * 100
        color = [colors[x] for x in encoder.transform(counts.index)]
        trace = go.Bar(x=counts.index, y=counts.values, name=country, showlegend=False,
                       marker={'color': color})
        fig.add_trace(trace, row=(i // 2) + 1, col=(i % 2) + 1)

    fig.update_layout(template='gridon',
                      margin=dict(l=80, r=80, t=50, b=50),
                      title={'text': '–°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–π (–ø–æ —Å—Ç—Ä–∞–Ω–∞–º)', 'x': 0.5},
                      height=1500,
                      width=700)
    for i in range(1, 9):
        fig.update_yaxes(title_text='–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å', row=i, col=1)

    st.write(fig)
st.markdown(
    """
    __–ö–∞—Å–∞–µ–º–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–æ–≤__:
    - üá∞üá™ –ö–µ–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ —Å–æ —Å—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é (–ø—Ä–∞–≤–¥–∞ —Ç–∞–º –≤—Å–µ–≥–æ 9 –∑–∞–ø—É—Å–∫–æ–≤).
    - üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∞—è 303 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ—Ç–∞, –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —É—Å–ø–µ—Ö–∞ 94%.
    - üá∑üá∫ –†–æ—Å—Å–∏—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∞—è 1398 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π, –∑–∞–Ω–∏–º–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —É—Å–ø–µ—Ö–∞ 93,34%. 
    –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∑–∞–ø—É—Å–∫–∞–º–∏, –ø—Ä–æ–≤–æ–¥–∏–º—ã–º–∏ –≤ :us: –°–®–ê, –≤ –†–æ—Å—Å–∏–∏ –¥–µ–ª–∞ –æ–±—Å—Ç–æ—è—Ç –ª—É—á—à–µ, 
    –ø–æ—Å–∫–æ–ª—å–∫—É —É –º–∏—Å—Å–∏–π –≤ –°–®–ê –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 88%.
    
    __–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–∫–∞–∑–æ–≤__:
    - üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è –∏ üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –æ—Ç–∫–∞–∑–æ–≤ - 66,67%. –î–≤–µ —Ç—Ä–µ—Ç–∏
     –∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π —Ç–µ—Ä–ø—è—Ç –Ω–µ—É–¥–∞—á—É.
        * –°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —É –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 33%, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ 
        –ë—Ä–∞–∑–∏–ª–∏—è –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∞ –Ω–∏ –æ–¥–Ω—É —É—Å–ø–µ—à–Ω—É—é –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –º–∏—Å—Å–∏—é.
        * –≠—Ç–æ –Ω–µ –ø—Ä—è–º–æ-—Ç–∞–∫–∏ —É–∂–∞—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –∏ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è, –∏ –ë—Ä–∞–∑–∏–ª–∏—è –ø—Ä–µ–¥–ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ–≥–æ 
        3 –ø–æ–ø—ã—Ç–∫–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–µ—Ç–∞.
    - –î–∞–ª–µ–µ, —É –Ω–∞—Å –µ—Å—Ç—å üá∞üáµ –°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è —Å 60% –Ω–µ—É–¥–∞—á –≤ —Å–≤–æ–∏—Ö 5 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ—Ç–∞—Ö.
    - –£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫–∞–∑–æ–≤ –≤ üáÆüá∑ –ò—Ä–∞–Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 57%. –û–¥–Ω–∞–∫–æ –æ–Ω —Å–æ–≤–µ—Ä—à–∏–ª –≤—Å–µ–≥–æ 14 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ—Ç–æ–≤.
    """)

st.markdown("""
            ## –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –∑–∞–ø—É—Å–∫
            <a id='part-3'></a>
            """, unsafe_allow_html=True)

st.image('images/Virgin.png', use_column_width=True,
         caption='–ù–æ–≤—ã–π –∫–æ—Ä–∞–±–ª—å –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Virgin, –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥')
st.markdown(
    """
    –†–∞–∑–æ–±—ä–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–≤–µ —Ç–∞–±–ª–∏—á–∫–∏ - —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –∑–∞–ø—É—Å–∫–∞–º–∏ –∏ –Ω–µ –æ—á–µ–Ω—å. 
    –ó–∞—Ç–µ–º –≤—ã—á–∏—Å–ª–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–æ–≤  –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—ã–≤–µ–¥–µ–º –≤—Å—ë –Ω–∞ –≥—Ä–∞—Ñ–∏–∫.
    """)

with st.echo(code_location='below'):
    SuccessPercentile = df[df['Status Mission'] == 'Success'].groupby('Company Name')[
        'Status Mission'].count()
    for company in SuccessPercentile.index:
        SuccessPercentile[company] = (SuccessPercentile[company] / len(
            df[df['Company Name'] == company])) * 100
    SuccessPercentile = SuccessPercentile.sort_index()

    FailurePercentile = df[df['Status Mission'] == 'Failure'].groupby('Company Name')[
        'Status Mission'].count()
    for company in FailurePercentile.index:
        FailurePercentile[company] = (FailurePercentile[company] / len(
            df[df['Company Name'] == company])) * 100
    FailurePercentile = FailurePercentile.sort_index()

    FailurePercentile = df[df['Status Mission'] == 'Failure'].groupby('Company Name')[
        'Status Mission'].count()
    for company in FailurePercentile.index:
        FailurePercentile[company] = (FailurePercentile[company] / len(
            df[df['Company Name'] == company])) * 100
    FailurePercentile = FailurePercentile.sort_index()

    trace1 = go.Bar(x=SuccessPercentile.index, y=SuccessPercentile.values,
                    name='–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤',
                    opacity=0.7)
    trace2 = go.Bar(x=FailurePercentile.index, y=FailurePercentile.values,
                    name='–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤',
                    opacity=0.7, visible='legendonly')

    fig = go.Figure([trace1, trace2])
    fig.update_layout(template='gridon', margin=dict(l=80, r=80, t=100, b=100),
                      barmode='stack',
                      title={'text': '–ù–∞—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã –∑–∞–ø—É—Å–∫–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏', 'x': 0.5},
                      width=750, yaxis_title='–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å', xaxis_title='',
                      legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center",
                                  x=0.5))

    st.write(fig)
st.markdown(
    """
    –ö–∞–∫ –º—ã –≤–∏–¥–∏–º, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–º–µ—é—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: 
    ASI, Blue Origin, Douglas, IRGC, Khrunichev, OKB-586,Starsem, Yuzhmash –∏ i-Space.
    
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–ø—Ä–æ—Ç–∏–≤ - –Ω–µ –∏–º–µ—é—Ç –Ω–∞ —Å—á–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: EER, Landspace, 
    OneSpace, Sandia –∏ Virgin Orbit. 
    
    –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–∞–≤–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è Virgin —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –ø–æ–ª–µ—Ç—ã 
    –≤ –∫–æ—Å–º–æ—Å –Ω–∞ –Ω–æ–≤–æ–º —Å—É–¥–Ω–µ - –ø–æ–∂–µ–ª–∞—é —É–¥–∞—á–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –∏—Ö —Ä–∞–∫–µ—Ç :angel:
    
    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ç–æ, –∫–∞–∫ —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å,
    –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω —É—Å–ø–µ—à–Ω–µ–µ/–Ω–µ—É–¥–∞—á–Ω–µ–µ –ø—Ä–æ–≤–æ–¥—è—Ç —Å–≤–æ–∏ –ø–æ–ª–µ—Ç—ã.
    """)
with st.echo(code_location='below'):
    fig = px.treemap(df, path=['Status Mission', 'Country', 'Company Name'])
    fig.update_layout(template='gridon', margin=dict(l=80, r=80, t=50, b=10),
                      title={'text': '–°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏: —Å—Ç—Ä–∞–Ω—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏', 'x': 0.5})
    st.write(fig)
st.markdown(
    """
    –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –ë–∞–π–∫–æ–Ω—É—Ä, —Ö–æ—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ —É –†–æ—Å—Å–∏–∏ –¥–æ 2050 –≥–æ–¥–∞,
    –Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ä–µ—Å–ø—É–±–ª–∏–∫–∏.
    """)

st.markdown("""
            ## –ò–º–µ—é—Ç –ª–∏ –∫–∞–∫–æ–µ-–ª–∏–±–æ –≤–ª–∏—è–Ω–∏–µ —Ä–∞–∫–µ—Ç—ã-–Ω–æ—Å–∏—Ç–µ–ª–∏?
            <a id='part-4'></a>
            """, unsafe_allow_html=True)

st.image('images/Vesicles.jpeg', use_column_width=True)
st.markdown(
    """
    –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –ª–∏—à—å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Ö–Ω–µ–º –≤ Other. 
    –ú–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏ –ö–æ—Å–º–æ—Å, –ú–æ–ª–Ω–∏—è –∏ Atlas.
    –ü–µ—Ä–≤—ã–µ –¥–≤–µ —Å–µ–º—å–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –°–°–°–†, –∞ Atlas - –°–®–ê. –ù–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∑–∞–ø—É—Å–∫–∞
    –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–∞—á–µ, —á–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π. –¢–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Ç–æ–º—É,
    —á—Ç–æ –≤–æ-–ø–µ—Ä–≤—ã—Ö, –°–®–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∫–µ—Ç, –∞ –≤–æ-–≤—Ç–æ—Ä—ã—Ö,
    –†–æ—Å—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ —Ä–∞–∫–µ—Ç–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π.
    """)

with st.echo(code_location='below'):
    details = []
    for detail in df.Detail.values:
        d = [x.strip() for x in detail.split('|')]
        for ele in d:
            if 'Atlas' in ele:
                details.append('Atlas')
            elif 'Ariane' in ele:
                details.append('Ariane')
            elif 'Cosmos' in ele:
                details.append('Cosmos')
            elif 'Delta' in ele:
                details.append('Delta')
            elif 'Falcon' in ele:
                details.append('Falcon')
            elif 'GSLV' in ele:
                details.append('GSLV')
            elif 'Long March' in ele:
                details.append('Long March')
            elif 'Molniya' in ele:
                details.append('Molniya')
            elif 'PSLV' in ele:
                details.append('PSLV')
            elif 'Soyuz' in ele:
                details.append('Soyuz')
            elif 'Thor' in ele:
                details.append('Thor')
            elif 'Titan' in ele:
                details.append('Titan')
            elif 'Tsyklon' in ele:
                details.append('Tsyklon')
            elif 'Vostok' in ele:
                details.append('Vostok')
            elif 'Zenit' in ele:
                details.append('Zenit')
            else:
                details.append('Other')

    counts = dict(pd.Series(details).value_counts(sort=True))
    counts = pd.DataFrame(counts, index=['Count']).transpose()

    fig = px.pie(counts, values='Count', names=counts.index)
    st.write(fig)

st.markdown("""
            ## –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ - –Ω–æ–≤–æ–µ –ª—É—á—à–µ —Å—Ç–∞—Ä–æ–≥–æ?
            <a id='part-5'></a>
            """, unsafe_allow_html=True)

st.image('images/launch.jpeg', caption='–ó–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç—ã SpaceX Falcon 9 –≤ –∞–ø—Ä–µ–ª–µ  2020',
         use_column_width=True)

st.markdown(
    """
    –ü–æ—Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—ã, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ –ø—Ä–æ–µ–Ω—Ç –ø—Ä–æ–≤–∞–ª–æ–≤ –∑–∞ —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.
    """)

with st.echo(code_location='below'):
    fig = make_subplots(rows=3, cols=1)
    for i, period in enumerate(['Year', 'Month', 'Weekday']):
        data = df[df['Status Mission'] == 'Failure'][period].value_counts().sort_index()
        data = dict((data / df[period].value_counts().sort_index()) * 100.0)
        mean = sum(data.values()) / len(data)
        if period == 'Year':
            x = list(data.keys())
        elif period == 'Month':
            x = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å',
                 '–û—Å–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        else:
            x = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

        trace1 = go.Scatter(x=x, y=list(data.values()), mode='lines', text=list(data.keys()),
                            name=f'–ü—Ä–æ–≤–∞–ª—ã –∑–∞ {period} (–∞–Ω–≥–ª.)', connectgaps=False)
        trace2 = go.Scatter(x=x, y=[mean] * len(data), mode='lines', showlegend=False,
                            name=f'–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–ª–æ–≤ –∑–∞ {period}',
                            line={'dash': 'dash', 'color':
                                'grey'})
        fig.append_trace(trace1, row=i + 1, col=1)
        fig.append_trace(trace2, row=i + 1, col=1)
    fig.update_layout(template='gridon', height=600,
                      title={
                          'text': '–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏',
                          'x': 0.5})
    for i in range(1, 4):
        fig.update_yaxes(title_text='–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å', row=i, col=1)
    st.write(fig)
st.markdown(
    """
    –•–æ—Ä–æ—à–æ –∑–∞–º–µ—Ç–Ω–æ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–ª–æ–≤ —Å –≥–æ–¥–∞–º–∏ —É–ø–∞–ª–æ. –í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
    
    –¢–∞–∫–∂–µ –∑–∞–º–µ—Ç–Ω–æ, —á—Ç–æ –∑–∞–ø—É—Å–∫–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–ª–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ —Ç–∞–∫ —É—Å–ø–µ—à–Ω—ã, –∫–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å—Ä–µ–¥—É. 
    –°—É–µ–≤–µ—Ä–Ω—ã–º –ª—é–¥—è–º –Ω–∞ –∑–∞–º–µ—Ç–∫—É.
    
    –í—Ä–µ–º—è –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü –Ω–µ –¥–∞—é—Ç –∫–∞–∫–∏—Ö-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π. 
    –†–∞–∑–≤–µ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤ –¥–µ–∫–∞–±—Ä–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤—Å–µ–≥–æ.
    """)

st.markdown("""
            ## –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–∏ 
            <a id='part-5'></a>
            """, unsafe_allow_html=True)

st.image('images/cost.png', caption='–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—á—Ç—ã –≤—Å–µ–≥–¥–∞ –≤—ã—Å–æ–∫–∞', use_column_width=True)
st.markdown(
    """
    –û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—å –∑–∞–ø—É—Å–∫–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–Ω–∏–∂–∞—Ç—å—Å—è —Å –≥–æ–¥–∞–º–∏ –≤ —Å–≤—è–∑–∏ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
    –û–¥–Ω–∞–∫–æ –±–æ–ª—å—à–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ –≤–Ω–æ—Å–∏—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏—è –°–°–°–† –≤ 1987 –≥–æ–¥—É.
    –¢–æ–≥–¥–∞ –≤ –∑–∞–ø—É—Å–∫ –≤–ª–æ–∂–∏–ª–∏ –±–æ–ª–µ–µ 500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤.
    """)

with st.echo(code_location='below'):
    df.rename(columns={" Rocket": "Rocket"}, inplace=True)
    df['Rocket'] = df['Rocket'].apply(lambda x: str(x).replace(',', ''))
    df['Rocket'] = df['Rocket'].astype('float64')
    df['Rocket'] = df['Rocket'].fillna(0)

    costDict = dict(df[df['Rocket'] > 0].groupby('Year')['Rocket'].mean())
    fig = go.Figure(
        go.Scatter(x=list(costDict.keys()), y=list(costDict.values()), yaxis='y2', mode='lines',
                   showlegend=False, name='–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏—Å—Å–∏–π –∑–∞ –≥–æ–¥'))
    fig.update_layout(template='gridon', margin=dict(l=80, r=80, t=50, b=50),
                      title={'text': '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', 'x': 0.5},
                      yaxis_title='–°—Ç–æ–∏–º–æ—Å—Ç—å (–º–ª–Ω. $)', xaxis_title='–ì–æ–¥ –∑–∞–ø—É—Å–∫–∞')
    st.write(fig)
st.markdown(
    """
    –†–∞—Å—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∏—Å—Å–∏–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º.
    
    –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–æ–≤.  –≠—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å 
    —Ö–æ—Ç—è –±—ã –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–æ–≤ NASA.
    """)

with st.echo(code_location='below'):
    fig = px.scatter(df[df['Rocket'].between(1, 4999)], x='Year', y='Company Name',
                     color='Status Mission', size='Rocket', size_max=30)
    fig.update_layout(template='gridon', margin=dict(l=80, r=80, t=50, b=50),
                      title={'text': '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–æ–≤ (–ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º)',
                             'x': 0.5}, height=650, yaxis_title='',
                      xaxis_title='–ì–æ–¥ –∑–∞–ø—É—Å–∫–∞')
    st.write(fig)
st.markdown(
    """
    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏—Ç—å, —á—Ç–æ —Ä–∞–Ω–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ —Ä–∞–∫–µ—Ç SpaceX –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏, –∏ —É –Ω–∏—Ö –±—ã–ª–∞ –∑–∞–º–µ—Ç–Ω–æ –±–æ–ª–µ–µ
    –Ω–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∏—Å—Å–∏–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Ö –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–º–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –º–∏—Å—Å–∏—è–º–∏. 
    –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –≤—ã–¥–µ–ª—è–µ–º–æ–≥–æ –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –º–∏—Å—Å–∏—é, 
    –ø–æ–º–æ–≥–ª–æ –∏–º —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–º–∏.
    """)
